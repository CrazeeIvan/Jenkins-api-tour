apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'project-report'
apply plugin: 'maven'
apply plugin: 'code-quality'
apply plugin: 'jetty'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.linkedin:org.linkedin.gradle-plugins:1.5.0'
    }
}

apply plugin: 'org.linkedin.userConfig'
apply plugin: 'org.linkedin.spec'

repositories {
    mavenLocal()
    mavenCentral()
    mavenRepo urls: ["http://download.java.net/maven/2/", 'http://maven.glassfish.org/content/groups/public/']
}

configurations {
    jenkins
}

dependencies {
    compile spec.libraries.ivy
    compile spec.libraries.httpBuilder
    compile spec.libraries.jenkinsCli
    runtime 'commons-cli:commons-cli:1.2'
    testCompile spec.libraries.spock
    testCompile spec.libraries.junit
    groovy spec.libraries.groovy
    jenkins spec.libraries.jenkins
}

group = spec.group
version = spec.version

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from groovydoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}


test {
    dependsOn jettyRunWar
    //takes a while to startup and otherwise tests run while still initializing
    doFirst {
        boolean keepGoing = true
        int tries = 0
        final int maxTries = 30
        while (keepGoing && tries < maxTries)
        {
            try
            {
                keepGoing = 'http://localhost:8080/'.toURL().text.contains('Please wait')
            }
            catch (e)
            {
                //logger.warn("Exception thrown: $e")
            }
            logger.warn("Waiting for Jenkins ${++tries}")
            Thread.sleep(5000)
        }
    }
}

jar.enabled = true
[jettyRun, jettyRunWar]*.daemon = true

/**
 * Use the jetty plugin to run the build server.
 */
jettyRunWar {
    webApp = configurations.jenkins.resolve().find {it.name.endsWith('war')}
    contextPath = ''
}

task wrapper(type: Wrapper) {
    gradleVersion = '0.9.2'
}

ideaModule {
    downloadJavadoc = true
}

ideaProject {
    withXml { provider ->
        def root = provider.asNode()
        root.component.find { it.@name == 'VcsDirectoryMappings' }.mapping[0].@vcs = 'Git'
        // Set gradle home
        def gradleSettings = root.appendNode('component', [name: 'GradleSettings'])
        gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir.absolutePath])
    }
    whenConfigured { project ->
        project.jdk.languageLevel = 'JDK_1_6'
        project.jdk.projectJdkName = '1.6'
    }
}

